#!/bin/bash

# We should fail if we encounter errors.
set -e
set -x

cd "$HOME"
github_directory="$HOME/workspace/github.com"

# Install utilities.
if [ -n "$(command -v yum)" ]; then
    sudo yum install -y git vim htop jq tmux zsh
elif [ -n "$(command -v apt-get)" ]; then
    sudo apt-get install -y git vim htop jq tmux zsh
fi

# Pull down GitHub projects.
projects=("robbyrussell/oh-my-zsh" "trironkk/Home" "VundleVim/Vundle.vim")
for project in "${projects[@]}"
do
    project_directory="$github_directory/$project"
    mkdir -p "$project_directory"
    git clone "https://github.com/$project" "$project_directory"
done

# Symlink projects into their default locations.
ln -s ~/.vim/bundle/Vundle.vim "$github_directory/VundleVim/Vundle.vim"
ln -s ~/.oh-my-zsh "$github_directory/robbyrussell/oh-my-zsh"

# We should run this from the working directory of this script.
cd $(readlink -f $(dirname "$0"))

# Create links of all our dot files.
dotfiles=$(find "$github_directory/trironkk/Home/dotfiles/" -type f)
for dotfile in $dotfiles
do
    # Derive the name of the file.
    name=.$(basename "$dotfile")

    # If the file and is a real file, back it up.
    if [ -f "$HOME/$name" ]; then
        mv "$HOME/$name" "$HOME/$name.old"
    fi

    # If the file is still there, it's a symlink. Remove it.
    rm -f "$HOME/$name"

    # Create a symlink.
    ln -s "$(readlink -f "$dotfile")" "$HOME/$name"
done

# Install vim plugins.
vim +PluginInstall +qall

# Set up git.
# Apparently git defaults to using 'vi' instead of 'vim', causing some
# unpleasant warnings when writing commit messages. Let's use 'vim'
# instead.
git config --global core.editor vim
git config --global user.email "trironk@gmail.com"
git config --global user.name "trironkk"
